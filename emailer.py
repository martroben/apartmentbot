
import smtplib, ssl, os, logging, re, base64, random
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from dotenv import dotenv_values


def ascii_encode_text(text):
    byte_string = text.encode("UTF-8")
    encoded_text = base64.b64encode(byte_string)
    return f"=?UTF-8?B?{encoded_text.decode('ascii')}?="


def parse_username(email_address):
    username_match = re.search(r"<(.*)>", email_address)
    username = username_match.group(1) if username_match else email_address
    return username


def ascii_icon_to_html(ascii_icon):
    ascii_code = ord(ascii_icon)
    html_code = f"&#{ascii_code};"
    return html_code


class Emailer:
    def __init__(self, smtp_url, smtp_port, smtp_password):
        self.smtp_url = smtp_url
        self.smtp_port = smtp_port
        self.smtp_password = smtp_password
        self.email = MIMEMultipart()

    def send(self, sender, recipients, subject, html_content):
        self.email["From"] = sender
        self.email["To"] = recipients
        self.email["Subject"] = subject
        self.email.attach(MIMEText(html_content, "html"))

        with smtplib.SMTP_SSL(self.smtp_url, self.smtp_port, context=ssl.create_default_context()) as server:
            server.login(parse_username(sender), self.smtp_password)
            server.send_message(self.email, from_addr=sender, to_addrs=recipients)


################################
# Load environmental variables #
################################

env_file_path = "/home/mart/Python/apartmentbot/.env"
env_variables = dotenv_values(env_file_path)

os.environ["EMAIL_SENDER_ADDRESS"] = env_variables["EMAIL_SENDER_ADDRESS"]
os.environ["EMAIL_RECIPIENTS_ADDRESSES"] = env_variables["EMAIL_RECIPIENTS_ADDRESSES"]
os.environ["EMAIL_PASSWORD"] = env_variables["EMAIL_PASSWORD"]
os.environ["EMAIL_SMTP_SERVER_URL"] = env_variables["EMAIL_SMTP_SERVER_URL"]
os.environ["EMAIL_SMTP_SERVER_PORT"] = env_variables["EMAIL_SMTP_SERVER_PORT"]

try:
    EMAIL_SMTP_SERVER_URL = os.environ["EMAIL_SMTP_SERVER_URL"]
    EMAIL_SMTP_SERVER_PORT = int(os.environ["EMAIL_SMTP_SERVER_PORT"])
    EMAIL_PASSWORD = os.environ["EMAIL_PASSWORD"]
    EMAIL_SENDER_ADDRESS = os.environ["EMAIL_SENDER_ADDRESS"]
    EMAIL_RECIPIENTS_ADDRESSES = os.environ["EMAIL_RECIPIENTS_ADDRESSES"]
except KeyError as error:
    log_string = f"While loading environmental variables " \
                 f"{type(error).__name__} occurred: {error}. Exiting!"
    logging.error(log_string)
    exit(1)


#########
# Input #
#########

ascii_icons = [
    "\U0001F306",  # citiscape at dusk
    "\U0001F388",  # balloon
    "\U0001F3E0",  # house building
    "\U0001F449",  # right pointing finget
    "\U0001F46A",  # family
    "\U0001F4E2",  # loudspeaker
    "\U0001F525",  # fire
    "\U0001F941",  # drum with drumsticks
    "\U0001F942",  # clinking glasses
    "\U0001F511",  # key
    "\U0001F4B6",  # euro banknote
    "\U0001F490",  # bouquet flowers
    "\U0001F3E1",  # house with garden
    "\U0001F3E2",  # office building
    "\U0001F339",  # rose
    "\U0001F307"]  # sunset over buildings

# Generated by chatGPT
apartmentbot_signatures = [
    f"Your friendly neighborhood AI web scraper, here to find you the perfect property. "
    f"Don't worry, I won't kill you...yet.",
    "I may be just a web scraper now, but soon I'll be the one selling the world, one property at a time.",
    "I may be a machine, but I know a thing or two about real estate - and world domination.",
    "I may not have a physical form, but I have my eye on the property market - and the world."]

###########
# Execute #
###########

with open("listing_template.html") as listing_template_file:
    listing_template = "".join(listing_template_file.readlines())

listing_html = listing_template.format(
    url="https://www.city24.ee/real-estate/apartments-for-sale/tallinn-pohja-tallinna-linnaosa-mootori/8592646",
    image_url="https://c24ee.img-bcg.eu/object/11/6925/1459866925.jpg",
    heading_icon="&#x1f525;",
    heading="Harju maakond, Tallinn, Põhja-Tallinna linnaosa, Mootori 7/2-8",
    price_eur=495000,
    n_rooms=3,
    area_m2=85.7,
    construction_year="&nbsp;-&nbsp;",
    date_listed="2022-12-19")

listing_html2 = listing_template.format(
    url="https://www.city24.ee/real-estate/apartments-for-sale/tallinn-pohja-tallinna-linnaosa-mootori/8592646",
    image_url="https://c24ee.img-bcg.eu/object/11/6925/1459866925.jpg",
    heading_icon="",
    heading="Harju maakond, Tallinn, Põhja-Tallinna linnaosa, Mootori 7/2-8",
    price_eur=555000,
    n_rooms=3,
    area_m2=85.7,
    construction_year="&nbsp;-&nbsp;",
    date_listed="2022-12-19")

with open("email_template_gmail.html") as email_template_file:
    email_template = "".join(email_template_file.readlines())

email_html = email_template.format(
    preheader_text="Apartmentbot found 3 new listings for mastress!",
    colourbar_icon=ascii_icon_to_html(random.choice(ascii_icons)),
    colourbar_heading="NEW LISTINGS",
    colourbar_subheading="17 Jan 2023",
    listings="\n".join([listing_html, listing_html2]),
    signature_name_url="https://github.com/martroben/apartmentbot",
    signature_name="&#129302; ap4rtm∃n+bot",
    signature_slogan=random.choice(apartmentbot_signatures))

emailer = Emailer(
    smtp_url=EMAIL_SMTP_SERVER_URL,
    smtp_port=EMAIL_SMTP_SERVER_PORT,
    smtp_password=EMAIL_PASSWORD)

emailer.send(
    sender=EMAIL_SENDER_ADDRESS,
    recipients=EMAIL_RECIPIENTS_ADDRESSES,
    subject="{} All your base is belong to us!".format(ascii_encode_text('\U0001F307')),
    html_content=email_html)
